Accès ENIB
==========
Aux stations de l'école avec votre nom de login :
  ssh mon_login@sftp.enib.fr -p 55555
A une base de données (ma_base.db) sqlite :
  sqlite3 ma_base.db
A une des  24  bases de données (ma_base.db) PostgreSQL en mode client/serveur sur le serveur tempo :
  psql -h tempo -U msi_b[1-24] msi_db[1-24]
  ----> exemple, pour l'utilisateur "msi_b1" sur la base "msi_db1" : 
  psql -h tempo -U msi_b1 msi_db1

Sujet
=====
Copier le contenu du répertoire :
    - /home/TP/modules/sujets/MSI/ORM/Graphes
dans un repertoire local (sous $HOME) préfixé par vos Nom_Prenom (ex : Dupond_Jean)
    - $HOME/....../Dupond_Jean-ORM/
Se deplacer dans le repertoire de travail 
    - cd $HOME/....../Dupond_Jean-ORM/
Contenu du repertoire Dupond_Jean-ORM/ :

{logname@hostname} tree Dupond_Jean-ORM
Dupond_Jean-ORM
├── graph.py
├── graph_display.py
├── graph_load.py
├── graph_save.py
├── TODO.txt

Fin de séance (17:30 au plus tard !)
=============

Envoyer à l'adresse nedelec@enib.fr une archive au format tgz (Dupond_Jean-ORM.tgz) de vos applications.
  - tar zcvf Dupond_Jean-ORM.tgz Dupond_Jean-ORM/

Travail à réaliser
==================
L'objectif du TP est d'utiliser un ORM pour développer des applications orientées objets 
qui manipuleront des graphes orientés stockés dans une base de données qui mettront en oeuvre les
mécanismes de transformation d'héritage et d'assocation de l'objet au relationnel.
    - héritage : graphes simples, pondérés, colorés
    - association : 
           * une arete est constituée de 2 noeuds
           * sur un noeud arrivent plusieurs aretes
           * d'un noeud partent plusieurs aretes

On dévelopera donc des applications pour :
    - créer (graph.py)
    - stocker (graph_save.py)
    - rechercher (graph_load.py)
    - visualiser le graphe (graph_display.py)

Première étape
--------------
A partir du code existant  :
 - creer un graphe (ex :réseau routier) simple et le stocker dans la BD (graph_save.py)
 - recuperer et parcourir le graphe stocke dans la BD (graph_load.py)
 - visualiser le  graphe stocke dans la BD (graph_display.py)
 

Deuxième étape
--------------
Mettre en place l'héritage pour créer des graphes pondérés :
  - class EdgeWeighted avec un observateur : get_weight()

En choisissant un des trois types de transformation ORM :
  - graph_single.py : mode mapping ou declaratif
  - graph_concrete.py : mode mapping ou declaratif
  - graph_join.py : mode mapping ou declaratif

Troisième étape
---------------
Mettre en place l'héritage pour créer des graphes colorés :
  - class NodeColored avec un observateur : get_color()

En choisissant un des deux autres types de transformation ORM :
  - graph_single.py : mode mapping, declaratif
  - graph_concrete.py : mode mapping, declaratif
  - graph_join.py : mode mapping, declaratif

Application partagée 
-------------------- 
Entre utilisateurs sur station de travail en mode client-serveur postgreSQL :
 - un utilisateur créé un graphe et le stocke sur une base de données postgreSQL (graph_save.py)
 - le deuxième utilisateur se connecte sur cette base de données et visualise le graphe (graph_display.py)
 - changement des rôles de lecture-écriture

